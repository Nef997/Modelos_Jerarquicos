AIC <- GAIC(m2)
Rsq <- Rsq(m2)
cor <- cor(df$Rentabilidad, predict(m2, data = df2))
temp <- data.frame(Family,AIC, Rsq, cor)
temp$modelo <- list(m2)
temp <- temp[, c(5,1,2,3,4)] #reorganiza el orden de los elementos para encajar con el df de resultados
results <- rbind(results, temp) # aÃ±ade los resultados
}
#Exportar modelos como r data
#save(results3, file = "resultados.RData")
View(results)
plot(results$modelo[[1]])
plot(results$modelo[[1]])
plot(results$modelo[[6]])
plot(results$modelo[[2]])
plot(results$modelo[[8]])
summary(results$modelo[[6]])
load("modeloselegidos.RData")
View(res_that_matter)
summary(res_that_matter$modelo[[1]])
summary(results$modelo[[6]])
plot(results$modelo[[5]])
plot(results$modelo[[5]])
plot(results$modelo[[6]])
plot(results$modelo[[2]])
plot(results$modelo[[12]])
plot(results$modelo[[11]])
results4 <- results[c(0,5,4,7),]
View(results4)
results4 <- results[c(0+1,5+1,4+1,7+1),]
View(results4)
save(results4, file='tryingnewdistributions.RData')
h
summary(results$modelo[[1]])
summary(results4$modelo[[1]])
summary(results4$modelo[[2]])
temp <- results4$modelo[[2]]
temp$mu.link
temp$mu.terms
temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio + Inestabilidad.economica +
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano)
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio + Inestabilidad.economica +
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2)
summary(test_model)
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio + Inestabilidad.economica +
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
summary(test_model)
summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
temp <- results4$modelo[[2]]
temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  +
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
corr(predict(test_model), df2$Rentabilidad)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  +
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
corr(predict(test_model), df2$Rentabilidad)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  +
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
cor(predict(test_model), df2$Rentabilidad)
res_that_matter$modelo[[1]]$sigma.formula
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Tamano + Clasificacion + Riesgo.tipo.de.cambio + Clasificacion:Riesgo.tipo.de.cambio +
Tamano:Clasificacion, data=df2, family=LOGNO)
View(df2)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Tamano + Clasificacion + Riesgo.tipo.de.cambio + Clasificacion:Riesgo.tipo.de.cambio +
Tamano:Clasificacion, data=df2, family=LOGNO)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
cor(predict(test_model), df2$Rentabilidad)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Tamano + Clasificacion + Riesgo.tipo.de.cambio + Clasificacion:Riesgo.tipo.de.cambio + Tamano:Clasificacion, data=df2, family=LOGNO)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Tamano + Clasificacion + Riesgo.tipo.de.cambio + Clasificacion:Riesgo.tipo.de.cambio, data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
cor(predict(test_model), df2$Rentabilidad)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Tamano + Clasificacion + Riesgo.tipo.de.cambio + Clasificacion:Riesgo.tipo.de.cambio + Clasificacion:Tamano, data=df2, family=LOGNO)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Tamano + Clasificacion + Riesgo.tipo.de.cambio + Clasificacion:Riesgo.tipo.de.cambio + Clasificacion*Tamano, data=df2, family=LOGNO)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio + Beta:Tamano, data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
cor(predict(test_model), df2$Rentabilidad)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion  + Beta:Tamano, data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
cor(predict(test_model), df2$Rentabilidad)
#summary(results4$modelo[[2]])
#save(results4, file='tryingnewdistributions.RData')
#temp <- results4$modelo[[2]]
#temp$sigma.formula
test_model <- gamlss(Rentabilidad ~ Beta + Riesgo.tipo.de.cambio  + Inestabilidad.economica+
Clasificacion + Beta:Clasificacion + Beta:Riesgo.tipo.de.cambio, sigma.formula = ~Beta + Tamano + Clasificacion + Riesgo.tipo.de.cambio + Beta:Clasificacion +
Tamano:Riesgo.tipo.de.cambio , data=df2, family=LOGNO)
#summary(test_model)
AIC(test_model)
Rsq(test_model)
cor(predict(test_model), df2$Rentabilidad)
sample(c(1,2), size=1)
sample(c(1,2), size=1)
modelowei <- results3[8,]
View(res_that_matter)
modelowei <- res_that_matter[2,]
modelologno <- results[6,]
modelologno <- results4[1,]
modelologno <- results[6,]
modeloig <- results4[1,]
modelobccg <- results4[5,]
View(modelobccg)
modelobccg <- results4[2,]
View(modelobccg)
modelobccg <- results4[3,]
View(modelobccg)
final_results <- cbind(modelologno, modelowei, modeloig, modelobccg)
final_results <- rbind(modelologno, modelowei, modeloig, modelobccg)
View(final_results)
save(final_results, file="resultados_finales.RData")
load("resultados_finales.RData")
df <- read.csv("df_rday.csv",header= T, encoding = "ISO_8859-1")
df$Clasificacion <- c(1, 1, 1, 1, 1 ,1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, rep(0, 9))
#1 desarrollado, 2 sub desarrollado
df <- df%>%mutate(
Rentabilidad = as.numeric(as.character(Rentabilidad)),
Clasificacion = factor(ifelse(Clasificacion==0, "Emergente", "Desarrollado"))
)
levels(df$Clasificacion) <- levels(df$Clasificacion)[c(2,1)]
load("modeloselegidos.RData")
load("resultados_finales.RData")
df2 <- df[,-c(1)] ##excluyo nombre d elos paises
View(final_results)
help(Rsq)
help("gamlss.family")
test <- lm(formula = Rentabilidad ~.,df[,-c(1,7)])
cor(df$Rentabilidad, test$fit)
AIC(test)
test <- summary(test)
test$adj.r.squared
test <- lm(formula = Rentabilidad ~.,df[,-c(1,7)])
cor(df$Rentabilidad, test$fit)
AIC(test)
test <- summary(test)
test$adj.r.squared
test <- lm(formula = Rentabilidad ~.,df[,-c(1,7)])
cor(df$Rentabilidad, test$fit)
AIC(test)
test <- summary(test)
test$adj.r.squared
View(final_results)
summary(res_that_matter$modelo[[1]])
wp(res_that_matter$modelo[[1]])
wp(final_results$modelo[[1]])
summary(final_results$modelo[[1]])
plot(final_results$modelo[[1]])
install.packages(foreign)
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages(foreign)
install.packages("foreign")
library(foreign)
help(jitter)
install.packages("arm")
help("arm")
library("arm")
help("arm")
help.start("arm")
help(package=arm)
install.packages(haven)
install.packages("haven")
kidiq <- read_dta("C:\Users\JF_Mra\Documents\Unal S6\Modelos_Jerarquicos\Book_Data\kidiq.dta")
library(haven)
kidiq <- read_dta("C:\Users\JF_Mra\Documents\Unal S6\Modelos_Jerarquicos\Book_Data\kidiq.dta")
library(haven)
kidiq <- read_dta("kidiq.dta")
setwd("C:\Users\JF_Mra\Documents\Unal S6\Modelos_Jerarquicos\Practicas")
getwd()
setwd("C:/Users/JF_Mra/Documents/Unal S6/Modelos_Jerarquicos/Book_Data")
#setwd("C:/Users/JF_Mra/Documents/Unal S6/Modelos_Jerarquicos/Book_Data")
getwd()
library(haven)
kidiq <- read_dta("kidiq.dta")
kidiq <- read_dta("child.iq/kidiq.dta")
kidiq <- read_dta("child.iq/kidiq.dta")
attach(kidiq)
View(kidiq)
knitr::opts_chunk$set(echo = TRUE)
library(haven)
kidiq <- read_dta("child.iq/kidiq.dta")
library(haven)
setwd("C:/Users/JF_Mra/Documents/Unal S6/Modelos_Jerarquicos/Book_Data")
kidiq <- read_dta("child.iq/kidiq.dta")
attach(kidiq)
#setwd("C:/Users/JF_Mra/Documents/Unal S6/Modelos_Jerarquicos/Book_Data")
View(kidiq)
library("arm")
## Plot Figure 3.1
kidscore.jitter <- jitter(kid_score)
jitter.binary <- function(a, jitt=.05){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
jitter.mom_hs <- jitter.binary(mom_hs)
fit.0 <- lm (kid_score ~ mom_hs)
display(fit.0)
plot(jitter.mom_hs,kidscore.jitter, xlab="Mother completed high school",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, seq(0,1))
axis (2, c(20,60,100,140))
abline (fit.0)
## Plot Figure 3.2
fit.1 <- lm (kid_score ~ mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
abline (fit.1)
library("arm")
## Plot Figure 3.1
kidscore.jitter <- jitter(kid_score)
jitter.binary <- function(a, jitt=.05){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
jitter.mom_hs <- jitter.binary(mom_hs)
fit.0 <- lm (kid_score ~ mom_hs)
display(fit.0)
plot(jitter.mom_hs,kidscore.jitter, xlab="Mother completed high school",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, seq(0,1))
axis (2, c(20,60,100,140))
abline (fit.0)
## Plot Figure 3.2
fit.1 <- lm (kid_score ~ mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
abline (fit.1)
# Figure 3.3
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit.2)[1] + coef(fit.2)[2] + coef(fit.2)[3]*x, add=TRUE, col="gray")
library("arm")
## Plot Figure 3.1
kidscore.jitter <- jitter(kid_score)
jitter.binary <- function(a, jitt=.05){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
jitter.mom_hs <- jitter.binary(mom_hs)
fit.0 <- lm (kid_score ~ mom_hs)
display(fit.0)
plot(jitter.mom_hs,kidscore.jitter, xlab="Mother completed high school",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, seq(0,1))
axis (2, c(20,60,100,140))
abline (fit.0)
## Plot Figure 3.2
fit.1 <- lm (kid_score ~ mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
abline (fit.1)
# Figure 3.3
fit.2 <- lm (kid_score ~ mom_hs + mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit.2)[1] + coef(fit.2)[2] + coef(fit.2)[3]*x, add=TRUE, col="gray")
curve (coef(fit.2)[1] + coef(fit.2)[3]*x, add=TRUE)
points (mom_iq[mom_hs==0], kid_score[mom_hs==0], pch=19)
points (mom_iq[mom_hs==1], kid_score[mom_hs==1], col="gray", pch=19)
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
library("arm")
## Plot Figure 3.1
kidscore.jitter <- jitter(kid_score)
jitter.binary <- function(a, jitt=.05){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
jitter.mom_hs <- jitter.binary(mom_hs)
fit.0 <- lm (kid_score ~ mom_hs)
display(fit.0)
plot(jitter.mom_hs,kidscore.jitter, xlab="Mother completed high school",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, seq(0,1))
axis (2, c(20,60,100,140))
abline (fit.0)
## Plot Figure 3.2
fit.1 <- lm (kid_score ~ mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
abline (fit.1)
# Figure 3.3
fit.2 <- lm (kid_score ~ mom_hs + mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit.2)[1] + coef(fit.2)[2] + coef(fit.2)[3]*x, add=TRUE, col="gray")
curve (coef(fit.2)[1] + coef(fit.2)[3]*x, add=TRUE)
points (mom_iq[mom_hs==0], kid_score[mom_hs==0], pch=19)
points (mom_iq[mom_hs==1], kid_score[mom_hs==1], col="gray", pch=19)
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
legend("asd")
library("arm")
## Plot Figure 3.1
kidscore.jitter <- jitter(kid_score)
jitter.binary <- function(a, jitt=.05){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
jitter.mom_hs <- jitter.binary(mom_hs)
fit.0 <- lm (kid_score ~ mom_hs)
display(fit.0)
plot(jitter.mom_hs,kidscore.jitter, xlab="Mother completed high school",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, seq(0,1))
axis (2, c(20,60,100,140))
abline (fit.0)
## Plot Figure 3.2
fit.1 <- lm (kid_score ~ mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
abline (fit.1)
# Figure 3.3
fit.2 <- lm (kid_score ~ mom_hs + mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit.2)[1] + coef(fit.2)[2] + coef(fit.2)[3]*x, add=TRUE, col="gray")
curve (coef(fit.2)[1] + coef(fit.2)[3]*x, add=TRUE)
points (mom_iq[mom_hs==0], kid_score[mom_hs==0], pch=19)
points (mom_iq[mom_hs==1], kid_score[mom_hs==1], col="gray", pch=19)
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
legend("asd", "asd")
plot(x = momhs, y=kid_score)
plot(x = mom_hs, y=kid_score)
plot(x = jitter(mom_hs), y=kid_score)
help(jitter)
plot(x = jitter(mom_hs, factor=0.2), y=kid_score)
library("arm")
plot(x = jitter(mom_hs, factor=0.2), y=kid_score)
## Plot Figure 3.1
kidscore.jitter <- jitter(kid_score)
jitter.binary <- function(a, jitt=.05){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
jitter.mom_hs <- jitter.binary(mom_hs)
fit.0 <- lm (kid_score ~ mom_hs)
display(fit.0)
plot(jitter.mom_hs,kidscore.jitter, xlab="Mother completed high school",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, seq(0,1))
axis (2, c(20,60,100,140))
abline (fit.0)
## Plot Figure 3.2
fit.1 <- lm (kid_score ~ mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
abline (fit.1)
# Figure 3.3
fit.2 <- lm (kid_score ~ mom_hs + mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit.2)[1] + coef(fit.2)[2] + coef(fit.2)[3]*x, add=TRUE, col="gray")
curve (coef(fit.2)[1] + coef(fit.2)[3]*x, add=TRUE)
points (mom_iq[mom_hs==0], kid_score[mom_hs==0], pch=19)
points (mom_iq[mom_hs==1], kid_score[mom_hs==1], col="gray", pch=19)
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
library("arm")
## Plot Figure 3.1
plot(x = jitter(mom_hs, factor=0.15), y=kid_score, xlab="Mother completed high school",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, seq(0,1))
axis (2, c(20,60,100,140))
abline (fit.0)
## Plot Figure 3.2
fit.1 <- lm (kid_score ~ mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n")
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
abline (fit.1)
# Figure 3.3
fit.2 <- lm (kid_score ~ mom_hs + mom_iq)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit.2)[1] + coef(fit.2)[2] + coef(fit.2)[3]*x, add=TRUE, col="gray")
curve (coef(fit.2)[1] + coef(fit.2)[3]*x, add=TRUE)
points (mom_iq[mom_hs==0], kid_score[mom_hs==0], pch=19)
points (mom_iq[mom_hs==1], kid_score[mom_hs==1], col="gray", pch=19)
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
help(legend)
temp <- summary(fit.0)
summary(fit.0)$r.squared
summary(fit.1)$r.squared
summary(fit.2)$r.squared
cor(fit.0$fitted.values, kidiq$kid_score)
cor(fit.0$fitted.values, kidiq$kid_score)
cor(fit.1$fitted.values, kidiq$kid_score)
cor(fit.2$fitted.values, kidiq$kid_score)
## Figure 3.4 (a)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit)[1] + coef(fit)[2] + (coef(fit)[3] + coef(fit)[4])*x, add=TRUE, col="gray")
fit <- lm (kid_score ~ mom_hs + mom_iq + mom_hs:mom_iq)
display (fit)
## Figure 3.4 (a)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, xaxt="n", yaxt="n", type="n")
curve (coef(fit)[1] + coef(fit)[2] + (coef(fit)[3] + coef(fit)[4])*x, add=TRUE, col="gray")
curve (coef(fit)[1] + coef(fit)[3]*x, add=TRUE)
points (mom_iq[mom_hs==0], kid_score[mom_hs==0], pch=20)
points (mom_iq[mom_hs==1], kid_score[mom_hs==1], col="gray", pch=20)
axis (1, c(80,100,120,140))
axis (2, c(20,60,100,140))
## Figure 3.4 (b)
plot(mom_iq,kid_score, xlab="Mother IQ score",
ylab="Child test score",pch=20, type="n", xlim=c(0,150), ylim=c(0,150))
curve (coef(fit)[1] + coef(fit)[2] + (coef(fit)[3] + coef(fit)[4])*x, add=TRUE, col="gray")
curve (coef(fit)[1] + coef(fit)[3]*x, add=TRUE)
points (mom_iq[mom_hs==0], kid_score[mom_hs==0], pch=20)
points (mom_iq[mom_hs==1], kid_score[mom_hs==1], col="gray", pch=20)
